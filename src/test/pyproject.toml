[build-system]
requires = ["setuptools>=42.0.0", "wheel>=0.37.0"]
build-backend = "setuptools.build_meta"

[project]
name = "self-healing-pipeline-tests"
version = "0.1.0"
description = "Comprehensive testing suite for the self-healing data pipeline for BigQuery using Google Cloud services"
authors = [
    {name = "Data Engineering Team", email = "data-engineering@example.com"}
]
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Database :: Database Engines/Servers",
    "Topic :: Software Development :: Testing"
]
dependencies = [
    "pytest>=7.3.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.3.1",
    "pytest-timeout>=2.1.0",
    "pytest-html>=3.2.0",
    "pytest-rerunfailures>=12.0",
    "pytest-benchmark>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-docker>=1.0.1",
    "pytest-env>=0.8.2",
    "mock>=5.0.2",
    "coverage>=7.2.7",
    "requests-mock>=1.11.0",
    "faker>=18.11.2",
    "factory-boy>=3.2.1",
    "freezegun>=1.2.2",
    "moto>=4.1.12",
    "google-cloud-testutils>=1.3.1",
    "google-cloud-storage>=2.7.0",
    "google-cloud-bigquery>=3.3.5",
    "google-cloud-composer>=1.4.0",
    "google-cloud-aiplatform>=1.25.0",
    "google-cloud-monitoring>=2.11.0",
    "google-cloud-logging>=3.2.5",
    "google-cloud-firestore>=2.7.2",
    "google-cloud-pubsub>=2.13.11",
    "google-auth>=2.16.0",
    "apache-airflow>=2.5.0",
    "great-expectations>=0.15.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "pyyaml>=6.0",
    "requests>=2.31.0",
    "scikit-learn>=1.2.0",
    "tensorflow>=2.12.0",
    "pymsteams>=0.2.0",
    "python-dotenv>=1.0.0",
    "tox>=4.6.0"
]

[project.optional-dependencies]
dev = [
    "black>=23.3.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.3.0",
    "pre-commit>=3.3.2"
]
performance = [
    "locust>=2.15.0"
]
e2e = [
    "selenium>=4.9.1",
    "playwright>=1.33.0",
    "pytest-playwright>=0.3.3"
]

[project.scripts]
run-tests = "src.test.scripts.run_all_tests:main"
setup-test-env = "src.test.scripts.setup_test_env:main"
teardown-test-env = "src.test.scripts.teardown_test_env:main"
generate-test-data = "src.test.scripts.generate_test_data:main"
generate-test-report = "src.test.scripts.generate_test_report:main"

[tool.pytest.ini_options]
testpaths = ["unit", "integration", "performance", "e2e"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "--strict-markers --cov=src/backend --cov-report=term --cov-report=html --cov-report=xml --html=reports/test-report.html --self-contained-html"
xfail_strict = true
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "performance: marks tests as performance tests",
    "slow: marks tests as slow running",
    "flaky: marks tests as flaky (may be retried)",
    "gcp: marks tests that require GCP resources",
    "bigquery: marks tests that interact with BigQuery",
    "composer: marks tests that interact with Cloud Composer",
    "gcs: marks tests that interact with Google Cloud Storage",
    "vertex: marks tests that interact with Vertex AI",
    "ingestion: marks tests related to data ingestion",
    "quality: marks tests related to data quality",
    "healing: marks tests related to self-healing",
    "monitoring: marks tests related to monitoring and alerting",
    "optimization: marks tests related to performance optimization"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError"
]

[tool.black]
line-length = 100
target-version = ["py39"]
include = "\.pyi?$"

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "E501"]
exclude = [".git", "__pycache__", "build", "dist"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py39,py310,lint,type,performance,e2e
isolated_build = True
skip_missing_interpreters = True
requires = 
    tox-conda>=0.9.2
"""
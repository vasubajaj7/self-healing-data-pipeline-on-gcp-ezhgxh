[build-system]
requires = ["setuptools>=42.0.0", "wheel>=0.37.0"]
build-backend = "setuptools.build_meta"

[project]
name = "self-healing-pipeline"
version = "0.1.0"
description = "An end-to-end self-healing data pipeline for BigQuery using Google Cloud services and AI-driven automation"
authors = [
    {name = "Data Engineering Team", email = "data-engineering@example.com"}
]
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Database :: Database Engines/Servers"
]
dependencies = [
    "google-cloud-storage>=2.7.0",
    "google-cloud-bigquery>=3.3.5",
    "google-cloud-composer>=1.4.0",
    "google-cloud-logging>=3.2.5",
    "google-cloud-monitoring>=2.11.0",
    "google-cloud-secret-manager>=2.12.6",
    "google-cloud-aiplatform>=1.21.0",
    "google-cloud-firestore>=2.7.2",
    "google-cloud-pubsub>=2.13.11",
    "google-cloud-functions>=1.8.0",
    "google-cloud-dataflow>=0.5.0",
    "google-auth>=2.16.0",
    "apache-airflow>=2.5.0",
    "great-expectations>=0.15.0",
    "pandas>=2.0.0",
    "numpy>=1.23.0",
    "pyyaml>=6.0",
    "requests>=2.31.0",
    "pymsteams>=0.2.0",
    "scikit-learn>=1.2.0",
    "tensorflow>=2.12.0",
    "fastapi>=0.95.0",
    "uvicorn>=0.22.0",
    "pydantic>=1.10.0",
    "python-dotenv>=1.0.0",
    "psycopg2-binary>=2.9.5",
    "sqlalchemy>=2.0.0",
    "retry>=0.9.2"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.3.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.10.0",
    "pytest-airflow>=0.1.0",
    "google-cloud-testutils>=1.3.0",
    "black>=23.3.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.3.0",
    "bandit>=1.7.5",
    "pre-commit>=3.3.2",
    "tox>=4.6.0",
    "coverage>=7.2.7",
    "sphinx>=7.0.1",
    "sphinx-rtd-theme>=1.2.1"
]
test = [
    "pytest>=7.3.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.10.0",
    "pytest-airflow>=0.1.0",
    "google-cloud-testutils>=1.3.0",
    "faker>=18.10.1",
    "freezegun>=1.2.2",
    "moto>=4.1.12",
    "responses>=0.23.1"
]
performance = [
    "locust>=2.15.1"
]

[project.scripts]
pipeline-cli = "src.backend.cli:main"

[tool.pytest]
ini_options = {
    testpaths = ["tests"],
    python_files = "test_*.py",
    python_classes = "Test*",
    python_functions = "test_*",
    addopts = "--verbose --cov=src --cov-report=term --cov-report=html",
    markers = [
        "unit: mark a test as a unit test",
        "integration: mark a test as an integration test",
        "performance: mark a test as a performance test",
        "slow: mark a test as slow running"
    ]
}

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError"
]

[tool.black]
line-length = 100
target-version = ["py39"]
include = "\.pyi?$"

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "E501"]
exclude = [".git", "__pycache__", "build", "dist"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
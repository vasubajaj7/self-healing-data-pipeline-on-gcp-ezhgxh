# Logging configuration for the self-healing data pipeline
version: '1.0'
disable_existing_loggers: False

# Formatter definitions for different output formats
formatters:
  standard:
    format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    datefmt: "%Y-%m-%d %H:%M:%S"
  json:
    class: "utils.logging.log_formatter.JsonFormatter"
    datefmt: "%Y-%m-%d %H:%M:%S"
  colored:
    class: "utils.logging.log_formatter.ColoredFormatter"
    format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    datefmt: "%Y-%m-%d %H:%M:%S"
  structured:
    class: "utils.logging.log_formatter.StructuredFormatter"
    format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    datefmt: "%Y-%m-%d %H:%M:%S"
    include_context: True

# Handler definitions
handlers:
  console:
    class: "logging.StreamHandler"
    level: "INFO"
    formatter: "standard"
    stream: "ext://sys.stdout"
  file:
    class: "logging.handlers.RotatingFileHandler"
    level: "INFO"
    formatter: "standard"
    filename: "logs/pipeline.log"
    maxBytes: 10485760  # 10 MB
    backupCount: 5
    encoding: "utf8"
  cloud_logging:
    class: "google.cloud.logging.handlers.CloudLoggingHandler"
    level: "INFO"
    formatter: "json"
  error_file:
    class: "logging.handlers.RotatingFileHandler"
    level: "ERROR"
    formatter: "standard"
    filename: "logs/error.log"
    maxBytes: 10485760  # 10 MB
    backupCount: 5
    encoding: "utf8"

# Logger configurations
loggers:
  # Root logger
  "":
    level: "INFO"
    handlers: ["console"]
    propagate: True
  
  # Component-specific loggers
  ingestion:
    level: "INFO"
    handlers: []  # Will inherit from root
    propagate: True
  quality:
    level: "INFO"
    handlers: []
    propagate: True
  self_healing:
    level: "INFO"
    handlers: []
    propagate: True
  monitoring:
    level: "INFO"
    handlers: []
    propagate: True
  optimization:
    level: "INFO"
    handlers: []
    propagate: True
  api:
    level: "INFO"
    handlers: []
    propagate: True

# Environment-specific configurations
environments:
  development:
    root:
      level: "DEBUG"
      handlers: ["console", "file"]
    formatters:
      console: "colored"
      file: "structured"
    loggers:
      ingestion:
        level: "DEBUG"
      quality:
        level: "DEBUG"
      self_healing:
        level: "DEBUG"
      monitoring:
        level: "DEBUG"
      optimization:
        level: "DEBUG"
      api:
        level: "DEBUG"
  
  staging:
    root:
      level: "INFO"
      handlers: ["console", "file", "cloud_logging", "error_file"]
    formatters:
      console: "structured"
      file: "structured"
      cloud_logging: "json"
    loggers:
      ingestion:
        level: "INFO"
      quality:
        level: "INFO"
      self_healing:
        level: "DEBUG"  # Keep debug for self-healing in staging
      monitoring:
        level: "INFO"
      optimization:
        level: "INFO"
      api:
        level: "INFO"
  
  production:
    root:
      level: "INFO"
      handlers: ["console", "cloud_logging", "error_file"]
    formatters:
      console: "json"
      cloud_logging: "json"
      error_file: "json"
    loggers:
      ingestion:
        level: "INFO"
      quality:
        level: "INFO"
      self_healing:
        level: "INFO"
      monitoring:
        level: "INFO"
      optimization:
        level: "INFO"
      api:
        level: "INFO"

# Context attributes for structured logging
context_attributes:
  - "correlation_id"
  - "execution_id"
  - "pipeline_id"
  - "task_id"
  - "component"
  - "source_id"
  - "user_id"

# Log file settings
log_directory: "logs"

# Cloud logging settings
cloud_logging:
  enabled_in_environments: ["staging", "production"]
  log_name: "self_healing_pipeline"
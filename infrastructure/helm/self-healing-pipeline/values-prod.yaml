# Production values for self-healing-pipeline
# This file contains production environment-specific overrides

global:
  environment: production
  project:
    id: self-healing-pipeline-prod
    region: us-central1
  image:
    tag: stable
    pullPolicy: IfNotPresent

backend:
  replicaCount: 3
  resources:
    requests:
      cpu: 1000m
      memory: 2Gi
    limits:
      cpu: 2000m
      memory: 4Gi
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 70
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8081"
    prometheus.io/path: /metrics
  nodeSelector:
    cloud.google.com/gke-nodepool: prod-backend-pool
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: component
            operator: In
            values:
            - backend
        topologyKey: kubernetes.io/hostname
  tolerations:
  - key: dedicated
    operator: Equal
    value: backend
    effect: NoSchedule

web:
  replicaCount: 3
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 1Gi
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
  nodeSelector:
    cloud.google.com/gke-nodepool: prod-web-pool
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: component
            operator: In
            values:
            - web
        topologyKey: kubernetes.io/hostname
  tolerations:
  - key: dedicated
    operator: Equal
    value: web
    effect: NoSchedule

ingress:
  enabled: true
  className: nginx
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
  hosts:
    - host: pipeline.example.com
      paths:
        - path: /
          pathType: Prefix
          service: web
          port: 80
        - path: /api
          pathType: Prefix
          service: backend
          port: 8080
  tls:
    - secretName: pipeline-tls
      hosts:
        - pipeline.example.com

monitoring:
  enabled: true
  prometheus:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 10s
      scrapeTimeout: 10s
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
      limits:
        cpu: 1000m
        memory: 2Gi
    retention: 15d
    storageClass: premium-rwo
    storageSize: 50Gi
  grafana:
    enabled: true
    adminPassword: ""
    dashboards:
      enabled: true
      label: grafana_dashboard
    resources:
      requests:
        cpu: 200m
        memory: 256Mi
      limits:
        cpu: 400m
        memory: 512Mi
    persistence:
      enabled: true
      storageClassName: premium-rwo
      size: 10Gi
  alertmanager:
    enabled: true
    config:
      global:
        resolve_timeout: 5m
      route:
        group_by: ['job', 'alertname', 'severity']
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 4h
        receiver: operations-team
        routes:
        - match:
            severity: critical
          receiver: operations-critical
          repeat_interval: 30m
        - match:
            severity: warning
          receiver: operations-team
          repeat_interval: 2h
      receivers:
      - name: operations-team
        email_configs:
        - to: operations@example.com
          send_resolved: true
      - name: operations-critical
        webhook_configs:
        - url: https://webhook.example.com/teams-prod-critical
          send_resolved: true
        email_configs:
        - to: critical-alerts@example.com
          send_resolved: true
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi

security:
  serviceAccount:
    create: true
    annotations:
      iam.gke.io/gcp-service-account: prod-service-account@self-healing-pipeline-prod.iam.gserviceaccount.com
  rbac:
    create: true
  podSecurityContext:
    fsGroup: 1000
    runAsNonRoot: true
    runAsUser: 1000
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
  networkPolicy:
    enabled: true
    additionalRules:
    - podSelector:
        matchLabels:
          component: backend
      ingress:
      - from:
        - podSelector:
            matchLabels:
              component: web
        ports:
        - port: 8080
          protocol: TCP
  certManager:
    enabled: true
    issuer:
      name: letsencrypt-prod
      kind: ClusterIssuer
      server: https://acme-v02.api.letsencrypt.org/directory
      email: admin@example.com

config:
  pipeline:
    logLevel: INFO
    enableMetrics: true
    enableTracing: true
    gcsBucket: self-healing-pipeline-prod
    bigqueryDataset: self_healing_pipeline_prod
  quality:
    validationTimeoutSeconds: 300
    qualityScoreThreshold: 95
    enableAutoValidation: true
  healing:
    mode: semi-automatic
    confidenceThreshold: 95
    maxRetryAttempts: 3
    approvalRequired: high-impact-only
    learningMode: active
  featureFlags:
    enableExperimentalFeatures: false
    enableDebugMode: false
    enablePerformanceTesting: false
    enableMockData: false
  secrets:
    databaseCredentials:
      create: true
      cloudsqlUser: pipeline_prod
      cloudsqlPassword: ""
      cloudsqlConnectionName: self-healing-pipeline-prod:us-central1:pipeline-prod-db
    apiKeys:
      create: true
      externalApiKey: ""
    oauthCredentials:
      create: true
      clientId: ""
      clientSecret: ""
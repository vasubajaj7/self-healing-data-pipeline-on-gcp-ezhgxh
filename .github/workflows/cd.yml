name: Continuous Deployment Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'infrastructure/**'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production

jobs:
  deploy-to-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    environment: development
    # Run on push to main or manual trigger for dev
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          npm ci

      - name: Build and test backend
        run: |
          pytest
          python -m build

      - name: Build and test web frontend
        run: |
          npm test
          npm run build

      - name: Login to Google Container Registry
        uses: docker/login-action@v2
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/pipeline-app:dev
            ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/pipeline-app:${{ github.sha }}

      - name: Initialize Terraform
        working-directory: ./infrastructure/environments/dev
        run: |
          terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" -backend-config="prefix=terraform/state/dev"

      - name: Apply Terraform configuration
        working-directory: ./infrastructure/environments/dev
        run: |
          terraform apply -auto-approve

      - name: Deploy to GKE dev cluster
        run: |
          gcloud container clusters get-credentials dev-cluster --region us-central1
          kubectl apply -f kubernetes/dev/

      - name: Run post-deployment validation tests
        run: python scripts/validate_deployment.py --environment=dev

      - name: Update deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "Development deployment successful!"
          else
            echo "Development deployment failed!"
            exit 1
          fi

  deploy-to-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    environment: staging
    needs: deploy-to-dev
    # Run only after dev deployment succeeds, and either automatically on push or manually for staging
    if: |
      needs.deploy-to-dev.result == 'success' && 
      (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'))
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.3.9'

      - name: Initialize Terraform
        working-directory: ./infrastructure/environments/staging
        run: |
          terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" -backend-config="prefix=terraform/state/staging"

      - name: Apply Terraform configuration
        working-directory: ./infrastructure/environments/staging
        run: |
          terraform apply -auto-approve

      - name: Deploy to GKE staging cluster
        run: |
          gcloud container clusters get-credentials staging-cluster --region us-central1
          # Promote dev image to staging
          kubectl set image deployment/pipeline-app pipeline-app=${{ secrets.DOCKER_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/pipeline-app:${{ github.sha }}
          kubectl apply -f kubernetes/staging/

      - name: Run integration tests
        run: python scripts/integration_tests.py --environment=staging

      - name: Run performance tests
        run: python scripts/performance_tests.py --environment=staging

      - name: Update deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "Staging deployment successful!"
          else
            echo "Staging deployment failed!"
            exit 1
          fi

  deploy-to-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: https://pipeline.example.com
    needs: deploy-to-staging
    # Run only after staging deployment succeeds and manual approval (via environment protection rules)
    if: |
      needs.deploy-to-staging.result == 'success' && 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.3.9'

      - name: Initialize Terraform
        working-directory: ./infrastructure/environments/production
        run: |
          terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" -backend-config="prefix=terraform/state/production"

      - name: Apply Terraform configuration
        working-directory: ./infrastructure/environments/production
        run: |
          terraform apply -auto-approve

      - name: Deploy to GKE production cluster
        run: |
          gcloud container clusters get-credentials production-cluster --region us-central1
          # Promote staging image to production
          kubectl set image deployment/pipeline-app pipeline-app=${{ secrets.DOCKER_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/pipeline-app:${{ github.sha }}
          kubectl apply -f kubernetes/production/

      - name: Run smoke tests
        run: python scripts/smoke_tests.py --environment=production

      - name: Monitor deployment for stability
        run: python scripts/monitor_deployment.py --environment=production --duration=10

      - name: Update deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "Production deployment successful!"
          else
            echo "Production deployment failed!"
            exit 1
          fi

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [deploy-to-dev, deploy-to-staging, deploy-to-production]
    if: |
      always() && 
      (needs.deploy-to-dev.result == 'failure' || 
       needs.deploy-to-staging.result == 'failure' || 
       needs.deploy-to-production.result == 'failure')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Determine environment to rollback
        id: determine-env
        run: |
          if [ "${{ needs.deploy-to-production.result }}" == "failure" ]; then
            echo "environment=production" >> $GITHUB_ENV
          elif [ "${{ needs.deploy-to-staging.result }}" == "failure" ]; then
            echo "environment=staging" >> $GITHUB_ENV
          else
            echo "environment=dev" >> $GITHUB_ENV
          fi

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Determine previous stable version
        id: stable-version
        run: |
          # Get the previous stable version tag for the environment
          PREV_VERSION=$(gcloud container images list-tags ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/pipeline-app --filter="tags:stable-${{ env.environment }}" --format="get(tags)" | grep -o "commit-[a-f0-9]*" | head -1)
          echo "prev_version=${PREV_VERSION:-latest}" >> $GITHUB_ENV

      - name: Execute rollback
        run: |
          # Connect to the appropriate cluster
          if [ "${{ env.environment }}" == "dev" ]; then
            gcloud container clusters get-credentials dev-cluster --region us-central1
          elif [ "${{ env.environment }}" == "staging" ]; then
            gcloud container clusters get-credentials staging-cluster --region us-central1
          else
            gcloud container clusters get-credentials production-cluster --region us-central1
          fi
          
          # Rollback to previous version
          kubectl rollout undo deployment/pipeline-app -n ${{ env.environment }}
          
          # Verify rollback
          kubectl rollout status deployment/pipeline-app -n ${{ env.environment }} --timeout=5m

      - name: Verify rollback success
        run: python scripts/verify_rollback.py --environment=${{ env.environment }}

      - name: Send rollback notification
        run: |
          echo "Rollback executed for ${{ env.environment }} environment"
          python scripts/send_notification.py --message="Rollback executed for ${{ env.environment }} environment due to deployment failure" --severity="high"